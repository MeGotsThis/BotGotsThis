from typing import Any, Dict, Hashable, Iterable, Iterator, List, Mapping
from typing import MutableMapping, NamedTuple, Optional, overload, Sequence
from typing import Tuple, Union

KeyParam = Union['IrcMessageTagsKey', str]
TagValue = Union[bool, str]


class ParsedKeyVendor(NamedTuple):
    key: str
    vendor: Optional[str]


escapedValue: Dict[str, str] = ...
unescapedValue: Dict[str, str] = ...


class IrcMessageTagsKey(Hashable):
    def __init__(self, key: str='', vendor: Optional[str]=None) -> None: ...
    @classmethod
    def fromKeyVendor(cls, keyVendor: str) -> 'IrcMessageTagsKey': ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @staticmethod
    def parse(keyToParse: str) -> ParsedKeyVendor: ...


class IrcMessageTagsReadOnly(Mapping[IrcMessageTagsKey, TagValue]):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, items: str) -> None: ...
    @overload
    def __init__(self, items: Mapping[KeyParam, TagValue]) -> None: ...
    @overload
    def __init__(self, items: Iterable[KeyParam]) -> None: ...
    @overload
    def __init__(self, items: Iterable[Tuple[KeyParam, TagValue]]) -> None: ...

    @staticmethod
    def fromKey(key: KeyParam) -> IrcMessageTagsKey: ...
    def __getitem__(self, key: KeyParam) -> TagValue: ...
    def __iter__(self) -> Iterator[IrcMessageTagsKey]: ...
    def __len__(self) -> int: ...
    def __str__(self) -> str: ...
    @staticmethod
    def formatValue(value: str) -> str: ...
    @staticmethod
    def parseTags(tags: str) -> Dict[IrcMessageTagsKey, TagValue]: ...

class IrcMessageTags(IrcMessageTagsReadOnly,
                     MutableMapping[IrcMessageTagsKey, TagValue]):
    def __setitem__(self, key: KeyParam, value: TagValue) -> None: ...
    def __delitem__(self, key: KeyParam): ...
